{
    function mk(type, opts) {
        opts.nodeType = type;
        return opts;
    }

    function list(head, tail, ix) {
        return [head].concat(tail.map(function(item) {
            return item[ix];
        }));
    }

    function makeBinaryOperator(head, rest) {
        var result = head;
        rest.forEach(function(i) {
            if (i[0] === '||') {
                result = mk('logical-or', {
                    left    : result,
                    right   : i[i2]
                });
            } else if (i[0] === '&&') {
                result = mk('logical-and', {
                    left    : result,
                    right   : i[i2]
                });
            } else {
                result = mk('binary-operator', {
                    op      : i[0],
                    left    : result,
                    right   : i[2]
                });
            }
        });
        return result;
    }
}

start
    = Program

//
// Production

Program
    = _ stmts:TopLevelStatement* {
        return stmts;
    }

TopLevelStatement
    = FunctionDefinition

Statement
    = FunctionDefinition
    / ChannelOpStatement
    / ReturnStatement
    / WhileStatement
    / SelectStatement
    / ExpressionStatement


FunctionDefinition
    = DEF _ async:ASYNC? _ name:ident _ args:FunctionArgs? retType:TypeDecl? body:Block {
        return mk("function-def", {
            async       : !!async,
            name        : name,
            args        : args || [],
            // TODO: this should be explicitly void
            returnType  : retType || null,
            body        : body
        });
    }

FunctionArgs
    = '(' _ lst:FunctionArgList? ')' _ {
        return lst || [];
    }

FunctionArgList
    = head:FunctionArg rest:(',' _ FunctionArg)* {
        return list(head, rest, 2);
    }

FunctionArg
    = name:ident _ type:TypeDecl {
        return mk("function-arg", {
            name: name,
            type: type
        });
    }

ChannelOpStatement
    = left:Expression _ op:ChannelOp _ right:Expression ';' _ {
        return mk("channel-op", {
            left: left,
            op: op,
            right: right
        });
    }

ChannelOp
    = '<-'  { return 'take'; }
    / '->'  { return 'put'; }

ReturnStatement
    = RETURN _ exp:Expression ';' _ {
        return mk("return", {
            exp: exp
        });
    }
    / RETURN _ ';' _ {
        return mk("return", {
            exp: undefined
        });
    }

WhileStatement
    = WHILE _ exp:Expression _ body:Block {
        return mk("while", {
            condition: exp,
            body: body
        });
    }

SelectStatement
    = SELECT _ '{' _ alts:SelectWhenClause* def:SelectDefaultClause? '}' _ {
        return mk("select", {
            alternatives: alts,
            default: def || null
        });
    }

SelectWhenClause
    = WHEN _ target:ident _ '<-' _ channels:ExpressionList body:Block {
        return {
            target      : target,
            channels    : channels,
            body        : body
        };
    }

SelectDefaultClause
    = DEFAULT _ body:Block {
        return {
            body        : body
        };
    }

TypeDecl
    = ':' _ id:TypeId {
        return mk("type-decl", {
            id: id
        });
    }

TypeId
    = ChannelTypeId
    / id:ident _ {
        return mk("type", {
            id: id
        });
    }

ChannelTypeId = CHAN _ '<' _ id:ident _ '>' _ {
    return mk("channel", {
        itemType: id
    });
}

Block
    = '{' _ decl:VariableDeclarations? stmts:Statement* '}' _ {
        return (decl || []).concat(stmts);
    }

VariableDeclarations
    = VariableDeclaration+

VariableDeclaration
    = AutoVariableDeclaration
    / TypedVariableDeclaration

AutoVariableDeclaration
    = id:ident _ ':' _ def:VariableDefault ';' _ {
        return mk('var-decl', {
            name            : id,
            auto            : true,
            type            : null,
            defaultValue    : def
        });
    }

TypedVariableDeclaration
    = id:ident _ type:TypeDecl def:VariableDefault? ';' _ {
        return mk('var-decl', {
            name            : id,
            auto            : false,
            type            : type,
            defaultValue    : def || void 0
        });
    }

VariableDefault
    = '=' _ exp:Expression {
        return exp;
    }

ExpressionStatement
    = exp:Expression ';' _ {
        return exp;
    }

ExpressionList
    = head:Expression tail:(',' _ Expression)* {
        return list(head, tail, 2);
    }

Expression
    = AdditiveExpression

AdditiveExpression
    = head:Spawn tail:(AdditiveOp _ Spawn)* {
        return makeBinaryOperator(head, tail);
    }

AdditiveOp
    = '+' / '-'

Spawn
    = SPAWN _ fn:Atom _ '(' _ args:FunctionCallArgs? ')' _ {
        return mk('spawn', {
            fn: fn,
            args: args || []
        });
    }
    / FunctionCall

FunctionCall
    = type:ChannelTypeId '(' _ ')' _ {
        return mk('make-channel', type);
    }
    / fn:Atom _ '(' _ args:FunctionCallArgs? ')' _ {
        return mk('function-call', {
            fn: fn,
            args: args || []
        });
    }
    / atom:Atom _ {
        return atom;
    }

FunctionCallArgs
    = head:Expression _ tail:(',' _ Expression)* {
        return list(head, tail, 2);
    }

Atom
    = Integer
    / Ident
    / Boolean

Integer
    = val:integer {
        return mk('integer', {
            value: parseInt(val, 10)
        });
    }

Ident
    = sym:ident {
        return mk('ident', {
            name: sym
        });
    }

Boolean
    = TRUE      { return mk('boolean', {value: true}); }
    / FALSE     { return mk('boolean', {value: false}); }

//
// Helpers

_               = [ \t\r\n]*

ident           = !keyword id:$( ident_start ident_rest* ) { return id; }
ident_start     = [a-zA-Z_]
ident_rest      = ident_start / [0-9]

integer         = '0'
                / $( [1-9] [0-9]* )

keyword
    = ASYNC
    / CHAN
    / DEF
    / DEFAULT
    / FALSE
    / IF
    / RETURN
    / SELECT
    / SPAWN
    / TRUE
    / WHEN
    / WHILE

//
// Tokens

ASYNC           = 'async'       !ident_rest
CHAN            = 'chan'        !ident_rest
DEF             = 'def'         !ident_rest
DEFAULT         = 'default'     !ident_rest
FALSE           = 'false'       !ident_rest
IF              = 'if'          !ident_rest
RETURN          = 'return'      !ident_rest
SELECT          = 'select'      !ident_rest
SPAWN           = 'spawn'       !ident_rest
TRUE            = 'true'        !ident_rest
WHEN            = 'when'        !ident_rest
WHILE           = 'while'       !ident_rest
